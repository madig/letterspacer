/// Returns the factor and reference glyph to be used for a glyph.
///
/// A data dump of a HTLetterspacer configuration, so I don't have to parse and
/// interprete Glyphs.app's GlyphData.xml file.
///
/// TODO: Replace with a configuration file and mechanism that works from Unicode
///       data but lets you freely group glyphs and assign factors?
pub fn config_for_glyph(name: &str) -> (&str, f64) {
    const LETTER_LOWERCASE: f64 = 1.0;
    const LETTER_SMALLCAPS: f64 = 1.1;
    const LETTER_UPPERCASE: f64 = 1.15;
    const NUMBER_FRACTION: f64 = 1.3;
    const NUMBER_SMALL: f64 = 0.8;
    const PUNCTUATION: f64 = 1.2;
    const SYMBOL_CURRENCY: f64 = 1.6;
    const SYMBOL: f64 = 1.5;

    match name {
        "A" => ("H", LETTER_UPPERCASE),
        "AE" => ("H", LETTER_UPPERCASE),
        "Aacute" => ("H", LETTER_UPPERCASE),
        "Acircumflex" => ("H", LETTER_UPPERCASE),
        "Adieresis" => ("H", LETTER_UPPERCASE),
        "Agrave" => ("H", LETTER_UPPERCASE),
        "Aring" => ("H", LETTER_UPPERCASE),
        "Atilde" => ("H", LETTER_UPPERCASE),
        "B" => ("H", LETTER_UPPERCASE),
        "C" => ("H", LETTER_UPPERCASE),
        "Ccedilla" => ("H", LETTER_UPPERCASE),
        "D" => ("H", LETTER_UPPERCASE),
        "Delta" => ("H", LETTER_UPPERCASE),
        "E" => ("H", LETTER_UPPERCASE),
        "Eacute" => ("H", LETTER_UPPERCASE),
        "Ecircumflex" => ("H", LETTER_UPPERCASE),
        "Edieresis" => ("H", LETTER_UPPERCASE),
        "Egrave" => ("H", LETTER_UPPERCASE),
        "Eth" => ("H", LETTER_UPPERCASE),
        "F" => ("H", LETTER_UPPERCASE),
        "G" => ("H", LETTER_UPPERCASE),
        "H" => ("H", LETTER_UPPERCASE),
        "I" => ("H", LETTER_UPPERCASE),
        "I.narrow" => ("H", LETTER_UPPERCASE),
        "Iacute" => ("H", LETTER_UPPERCASE),
        "Icircumflex" => ("H", LETTER_UPPERCASE),
        "Idieresis" => ("H", LETTER_UPPERCASE),
        "Igrave" => ("H", LETTER_UPPERCASE),
        "J" => ("H", LETTER_UPPERCASE),
        "J.narrow" => ("H", LETTER_UPPERCASE),
        "IJ" => ("H", LETTER_UPPERCASE),
        "K" => ("H", LETTER_UPPERCASE),
        "L" => ("H", LETTER_UPPERCASE),
        "M" => ("H", LETTER_UPPERCASE),
        "N" => ("H", LETTER_UPPERCASE),
        "Ntilde" => ("H", LETTER_UPPERCASE),
        "O" => ("H", LETTER_UPPERCASE),
        "OE" => ("H", LETTER_UPPERCASE),
        "Oacute" => ("H", LETTER_UPPERCASE),
        "Oacute.loclPLK" => ("H", LETTER_UPPERCASE),
        "Ocircumflex" => ("H", LETTER_UPPERCASE),
        "Odieresis" => ("H", LETTER_UPPERCASE),
        "Ograve" => ("H", LETTER_UPPERCASE),
        "Ohm" => ("Ohm", SYMBOL),
        "Omega" => ("H", LETTER_UPPERCASE),
        "Oslash" => ("H", LETTER_UPPERCASE),
        "Otilde" => ("H", LETTER_UPPERCASE),
        "P" => ("H", LETTER_UPPERCASE),
        "Q" => ("H", LETTER_UPPERCASE),
        "R" => ("H", LETTER_UPPERCASE),
        "S" => ("H", LETTER_UPPERCASE),
        "S.closed" => ("H", LETTER_UPPERCASE),
        "T" => ("H", LETTER_UPPERCASE),
        "Thorn" => ("H", LETTER_UPPERCASE),
        "U" => ("H", LETTER_UPPERCASE),
        "Uacute" => ("H", LETTER_UPPERCASE),
        "Ucircumflex" => ("H", LETTER_UPPERCASE),
        "Udieresis" => ("H", LETTER_UPPERCASE),
        "Ugrave" => ("H", LETTER_UPPERCASE),
        "V" => ("H", LETTER_UPPERCASE),
        "W" => ("H", LETTER_UPPERCASE),
        "X" => ("H", LETTER_UPPERCASE),
        "Y" => ("H", LETTER_UPPERCASE),
        "Yacute" => ("H", LETTER_UPPERCASE),
        "Z" => ("H", LETTER_UPPERCASE),
        "a" => ("x", LETTER_LOWERCASE),
        "a.sc" => ("h.sc", LETTER_SMALLCAPS),
        "aacute" => ("x", LETTER_LOWERCASE),
        "aacute.sc" => ("h.sc", LETTER_SMALLCAPS),
        "acircumflex" => ("x", LETTER_LOWERCASE),
        "acircumflex.sc" => ("h.sc", LETTER_SMALLCAPS),
        "acute" => ("acute", 1.0),
        "acute.case" => ("acute.case", 1.0),
        "acute.case.loclPLK" => ("acute.case.loclPLK", 1.0),
        "acute.loclPLK" => ("acute.loclPLK", 1.0),
        "acute.sc" => ("acute.sc", 1.0),
        "acute.sc.loclPLK" => ("acute.sc.loclPLK", 1.0),
        "acutecomb" => ("acutecomb", 1.0),
        "acutecomb.case" => ("acutecomb.case", 1.0),
        "acutecomb.sc" => ("acutecomb.sc", 1.0),
        "adieresis" => ("x", LETTER_LOWERCASE),
        "adieresis.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ae" => ("x", LETTER_LOWERCASE),
        "ae.sc" => ("h.sc", LETTER_SMALLCAPS),
        "agrave" => ("x", LETTER_LOWERCASE),
        "agrave.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ampersand" => ("ampersand", SYMBOL),
        "ampersand.ss03" => ("ampersand.ss03", SYMBOL),
        "approxequal" => ("approxequal", SYMBOL),
        "approxequal.osf" => ("approxequal.osf", SYMBOL),
        "approxequal.tf" => ("approxequal.tf", SYMBOL),
        "approxequal.tosf" => ("approxequal.tosf", SYMBOL),
        "aring" => ("x", LETTER_LOWERCASE),
        "aring.sc" => ("h.sc", LETTER_SMALLCAPS),
        "asciicircum" => ("asciicircum", SYMBOL),
        "asciitilde" => ("asciitilde", SYMBOL),
        "asciitilde.osf" => ("asciitilde.osf", SYMBOL),
        "asciitilde.tf" => ("asciitilde.tf", SYMBOL),
        "asciitilde.tosf" => ("asciitilde.tosf", SYMBOL),
        "asterisk" => ("asterisk", PUNCTUATION),
        "arrowdown" => ("arrowdown", SYMBOL),
        "arrowup" => ("arrowup", SYMBOL),
        "arrowleft" => ("arrowleft", SYMBOL),
        "arrowright" => ("arrowright", SYMBOL),
        "at" => ("at", SYMBOL),
        "atilde" => ("x", LETTER_LOWERCASE),
        "atilde.sc" => ("h.sc", LETTER_SMALLCAPS),
        "b" => ("x", LETTER_LOWERCASE),
        "b.sc" => ("h.sc", LETTER_SMALLCAPS),
        "backslash" => ("backslash", 1.0),
        "bar" => ("bar", SYMBOL),
        "braceleft" => ("braceleft", PUNCTUATION),
        "braceleft.case" => ("braceleft.case", PUNCTUATION),
        "braceright" => ("braceright", PUNCTUATION),
        "braceright.case" => ("braceright.case", PUNCTUATION),
        "bracketleft" => ("bracketleft", PUNCTUATION),
        "bracketleft.case" => ("bracketleft.case", PUNCTUATION),
        "bracketright" => ("bracketright", PUNCTUATION),
        "bracketright.case" => ("bracketright.case", PUNCTUATION),
        "brokenbar" => ("brokenbar", SYMBOL),
        "bullet" => ("bullet", PUNCTUATION),
        "bulletoperator" => ("bulletoperator", SYMBOL),
        "c" => ("x", LETTER_LOWERCASE),
        "c.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ccedilla" => ("x", LETTER_LOWERCASE),
        "ccedilla.sc" => ("h.sc", LETTER_SMALLCAPS),
        "cedilla" => ("cedilla", 1.0),
        "cedilla.case" => ("cedilla.case", 1.0),
        "cedilla.case.ALT" => ("cedilla.case.ALT", 1.0),
        "cedilla.sc" => ("cedilla.sc", 1.0),
        "cedilla.sc.ALT" => ("cedilla.sc.ALT", 1.0),
        "cedillacomb" => ("cedillacomb", 1.0),
        "cedillacomb.case" => ("cedillacomb.case", 1.0),
        "cedillacomb.sc" => ("cedillacomb.sc", 1.0),
        "cent" => ("cent", SYMBOL_CURRENCY),
        "cent.osf" => ("cent.osf", SYMBOL_CURRENCY),
        "cent.tf" => ("cent.tf", SYMBOL_CURRENCY),
        "cent.tosf" => ("cent.tosf", SYMBOL_CURRENCY),
        "circumflex" => ("circumflex", 1.0),
        "circumflex.case" => ("circumflex.case", 1.0),
        "circumflex.sc" => ("circumflex.sc", 1.0),
        "circumflexcomb" => ("circumflexcomb", 1.0),
        "circumflexcomb.case" => ("circumflexcomb.case", 1.0),
        "circumflexcomb.sc" => ("circumflexcomb.sc", 1.0),
        "colon" => ("colon", PUNCTUATION),
        "comma" => ("comma", PUNCTUATION),
        "copyright" => ("copyright", SYMBOL),
        "currency" => ("currency", SYMBOL_CURRENCY),
        "currency.osf" => ("currency.osf", SYMBOL_CURRENCY),
        "currency.tf" => ("currency.tf", SYMBOL_CURRENCY),
        "currency.tosf" => ("currency.tosf", SYMBOL_CURRENCY),
        "d" => ("x", LETTER_LOWERCASE),
        "d.sc" => ("h.sc", LETTER_SMALLCAPS),
        "dagger" => ("dagger", SYMBOL),
        "dagger.osf" => ("dagger.osf", SYMBOL),
        "dagger.tf" => ("dagger.tf", SYMBOL),
        "dagger.tosf" => ("dagger.tosf", SYMBOL),
        "daggerdbl" => ("daggerdbl", SYMBOL),
        "daggerdbl.osf" => ("daggerdbl.osf", SYMBOL),
        "daggerdbl.tf" => ("daggerdbl.tf", SYMBOL),
        "daggerdbl.tosf" => ("daggerdbl.tosf", SYMBOL),
        "degree" => ("degree", SYMBOL),
        "degree.osf" => ("degree.osf", SYMBOL),
        "degree.tf" => ("degree.tf", SYMBOL),
        "degree.tosf" => ("degree.tosf", SYMBOL),
        "dieresis" => ("dieresis", 1.0),
        "dieresis.case" => ("dieresis.case", 1.0),
        "dieresis.sc" => ("dieresis.sc", 1.0),
        "dieresiscomb" => ("dieresiscomb", 1.0),
        "dieresiscomb.case" => ("dieresiscomb.case", 1.0),
        "dieresiscomb.sc" => ("dieresiscomb.sc", 1.0),
        "divide" => ("divide", SYMBOL),
        "divide.osf" => ("divide.osf", SYMBOL),
        "divide.tf" => ("divide.tf", SYMBOL),
        "divide.tosf" => ("divide.tosf", SYMBOL),
        "divisionslash" => ("divisionslash", SYMBOL),
        "dollar" => ("dollar", SYMBOL_CURRENCY),
        "dollar.osf" => ("dollar.osf", SYMBOL_CURRENCY),
        "dollar.tf" => ("dollar.tf", SYMBOL_CURRENCY),
        "dollar.tosf" => ("dollar.tosf", SYMBOL_CURRENCY),
        "dotaccentcomb" => ("dotaccentcomb", 1.0),
        "dotlessi" => ("x", LETTER_LOWERCASE),
        "dotlessj" => ("x", LETTER_LOWERCASE),
        "dot" => ("dot", 1.0),
        "e" => ("x", LETTER_LOWERCASE),
        "e.sc" => ("h.sc", LETTER_SMALLCAPS),
        "eacute" => ("x", LETTER_LOWERCASE),
        "eacute.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ecircumflex" => ("x", LETTER_LOWERCASE),
        "ecircumflex.sc" => ("h.sc", LETTER_SMALLCAPS),
        "edieresis" => ("x", LETTER_LOWERCASE),
        "edieresis.sc" => ("h.sc", LETTER_SMALLCAPS),
        "egrave" => ("x", LETTER_LOWERCASE),
        "egrave.sc" => ("h.sc", LETTER_SMALLCAPS),
        "eight" => ("one", PUNCTUATION),
        "eight.dnom" => ("eight.dnom", NUMBER_SMALL),
        "eight.numr" => ("eight.numr", NUMBER_SMALL),
        "eight.osf" => ("zero.osf", PUNCTUATION),
        "eight.tf" => ("one", PUNCTUATION),
        "eight.tosf" => ("one", PUNCTUATION),
        "eightinferior" => ("eightinferior", NUMBER_SMALL),
        "eightsuperior" => ("eightsuperior", NUMBER_SMALL),
        "ellipsis" => ("ellipsis", PUNCTUATION),
        "emdash" => ("emdash", 1.0),
        "emdash.case" => ("emdash.case", 1.0),
        "emptyset" => ("emptyset", SYMBOL),
        "endash" => ("endash", 1.0),
        "endash.case" => ("endash.case", 1.0),
        "equal" => ("equal", SYMBOL),
        "equal.dnom" => ("equal.dnom", SYMBOL),
        "equal.numr" => ("equal.numr", SYMBOL),
        "equal.osf" => ("equal.osf", SYMBOL),
        "equal.tf" => ("equal.tf", SYMBOL),
        "equal.tosf" => ("equal.tosf", SYMBOL),
        "estimated" => ("estimated", SYMBOL),
        "eth" => ("x", LETTER_LOWERCASE),
        "eth.sc" => ("h.sc", LETTER_SMALLCAPS),
        "euro" => ("euro", SYMBOL_CURRENCY),
        "euro.osf" => ("euro.osf", SYMBOL_CURRENCY),
        "euro.tf" => ("euro.tf", SYMBOL_CURRENCY),
        "euro.tosf" => ("euro.tosf", SYMBOL_CURRENCY),
        "exclam" => ("exclam", PUNCTUATION),
        "exclamdown" => ("exclamdown", PUNCTUATION),
        "exclamdown.case" => ("exclamdown.case", PUNCTUATION),
        "f" => ("x", LETTER_LOWERCASE),
        "f.sc" => ("h.sc", LETTER_SMALLCAPS),
        "fi" => ("fi", 1.0),
        "fi.sc" => ("h.sc", LETTER_SMALLCAPS),
        "figuredash" => ("figuredash", 1.0),
        "figuredash.osf" => ("figuredash.osf", 1.0),
        "figuredash.tf" => ("figuredash.tf", 1.0),
        "figuredash.tosf" => ("figuredash.tosf", 1.0),
        "figurespace" => ("figurespace", 1.0),
        "five" => ("one", PUNCTUATION),
        "five.dnom" => ("five.dnom", NUMBER_SMALL),
        "five.numr" => ("five.numr", NUMBER_SMALL),
        "five.osf" => ("zero.osf", PUNCTUATION),
        "five.tf" => ("one", PUNCTUATION),
        "five.tosf" => ("one", PUNCTUATION),
        "fiveinferior" => ("fiveinferior", NUMBER_SMALL),
        "fivesuperior" => ("fivesuperior", NUMBER_SMALL),
        "fl" => ("fl", 1.0),
        "fl.sc" => ("h.sc", LETTER_SMALLCAPS),
        "four" => ("one", PUNCTUATION),
        "four.dnom" => ("four.dnom", NUMBER_SMALL),
        "four.numr" => ("four.numr", NUMBER_SMALL),
        "four.osf" => ("zero.osf", PUNCTUATION),
        "four.tf" => ("one", PUNCTUATION),
        "four.tosf" => ("one", PUNCTUATION),
        "fourinferior" => ("fourinferior", NUMBER_SMALL),
        "foursuperior" => ("foursuperior", NUMBER_SMALL),
        "fraction" => ("fraction", NUMBER_FRACTION),
        "g" => ("x", LETTER_LOWERCASE),
        "g.alt1" => ("x", LETTER_LOWERCASE),
        "g.sc" => ("h.sc", LETTER_SMALLCAPS),
        "germandbls" => ("x", LETTER_LOWERCASE),
        "germandbls.sc" => ("h.sc", LETTER_SMALLCAPS),
        "grave" => ("grave", 1.0),
        "grave.case" => ("grave.case", 1.0),
        "grave.sc" => ("grave.sc", 1.0),
        "gravecomb" => ("gravecomb", 1.0),
        "gravecomb.case" => ("gravecomb.case", 1.0),
        "gravecomb.sc" => ("gravecomb.sc", 1.0),
        "greater" => ("greater", SYMBOL),
        "greater.osf" => ("greater.osf", SYMBOL),
        "greater.tf" => ("greater.tf", SYMBOL),
        "greater.tosf" => ("greater.tosf", SYMBOL),
        "greaterequal" => ("greaterequal", SYMBOL),
        "greaterequal.osf" => ("greaterequal.osf", SYMBOL),
        "greaterequal.tf" => ("greaterequal.tf", SYMBOL),
        "greaterequal.tosf" => ("greaterequal.tosf", SYMBOL),
        "guillemetleft" => ("guillemetleft", PUNCTUATION),
        "guillemetleft.case" => ("guillemetleft.case", PUNCTUATION),
        "guillemetright" => ("guillemetright", PUNCTUATION),
        "guillemetright.case" => ("guillemetright.case", PUNCTUATION),
        "guilsinglleft" => ("guilsinglleft", PUNCTUATION),
        "guilsinglleft.case" => ("guilsinglleft.case", PUNCTUATION),
        "guilsinglright" => ("guilsinglright", PUNCTUATION),
        "guilsinglright.case" => ("guilsinglright.case", PUNCTUATION),
        "h" => ("x", LETTER_LOWERCASE),
        "h.sc" => ("h.sc", LETTER_SMALLCAPS),
        "hyphen" => ("hyphen", 1.0),
        "hyphen.case" => ("hyphen.case", 1.0),
        "i" => ("x", LETTER_LOWERCASE),
        "i.sc" => ("h.sc", LETTER_SMALLCAPS),
        "iacute" => ("x", LETTER_LOWERCASE),
        "iacute.sc" => ("h.sc", LETTER_SMALLCAPS),
        "icircumflex" => ("x", LETTER_LOWERCASE),
        "icircumflex.sc" => ("h.sc", LETTER_SMALLCAPS),
        "idieresis" => ("x", LETTER_LOWERCASE),
        "idieresis.sc" => ("h.sc", LETTER_SMALLCAPS),
        "igrave" => ("x", LETTER_LOWERCASE),
        "igrave.sc" => ("h.sc", LETTER_SMALLCAPS),
        "increment" => ("increment", SYMBOL),
        "infinity" => ("infinity", SYMBOL),
        "infinity.case" => ("infinity.case", SYMBOL),
        "infinity.osf" => ("infinity.osf", SYMBOL),
        "infinity.tf" => ("infinity.tf", SYMBOL),
        "infinity.tosf" => ("infinity.tosf", SYMBOL),
        "integral" => ("integral", SYMBOL),
        "integral.osf" => ("integral.osf", SYMBOL),
        "integral.tf" => ("integral.tf", SYMBOL),
        "integral.tosf" => ("integral.tosf", SYMBOL),
        "j" => ("x", LETTER_LOWERCASE),
        "j.sc" => ("h.sc", LETTER_SMALLCAPS),
        "k" => ("x", LETTER_LOWERCASE),
        "k.sc" => ("h.sc", LETTER_SMALLCAPS),
        "l" => ("x", LETTER_LOWERCASE),
        "l.sc" => ("h.sc", LETTER_SMALLCAPS),
        "less" => ("less", SYMBOL),
        "less.osf" => ("less.osf", SYMBOL),
        "less.tf" => ("less.tf", SYMBOL),
        "less.tosf" => ("less.tosf", SYMBOL),
        "lessequal" => ("lessequal", SYMBOL),
        "lessequal.osf" => ("lessequal.osf", SYMBOL),
        "lessequal.tf" => ("lessequal.tf", SYMBOL),
        "lessequal.tosf" => ("lessequal.tosf", SYMBOL),
        "literSign" => ("literSign", SYMBOL),
        "logicalnot" => ("logicalnot", SYMBOL),
        "logicalnot.osf" => ("logicalnot.osf", SYMBOL),
        "logicalnot.tf" => ("logicalnot.tf", SYMBOL),
        "logicalnot.tosf" => ("logicalnot.tosf", SYMBOL),
        "lozenge" => ("lozenge", SYMBOL),
        "lozenge.osf" => ("lozenge.osf", SYMBOL),
        "lozenge.tf" => ("lozenge.tf", SYMBOL),
        "lozenge.tosf" => ("lozenge.tosf", SYMBOL),
        "m" => ("x", LETTER_LOWERCASE),
        "m.sc" => ("h.sc", LETTER_SMALLCAPS),
        "macron" => ("macron", 1.0),
        "macron.case" => ("macron.case", 1.0),
        "macron.sc" => ("macron.sc", 1.0),
        "macroncomb" => ("macroncomb", 1.0),
        "micro" => ("micro", SYMBOL),
        "minus" => ("minus", SYMBOL),
        "minus.dnom" => ("minus.dnom", SYMBOL),
        "minus.numr" => ("minus.numr", SYMBOL),
        "minus.osf" => ("minus.osf", SYMBOL),
        "minus.tf" => ("minus.tf", SYMBOL),
        "minus.tosf" => ("minus.tosf", SYMBOL),
        "mu" => ("x", LETTER_LOWERCASE),
        "multiply" => ("multiply", SYMBOL),
        "multiply.osf" => ("multiply.osf", SYMBOL),
        "multiply.tf" => ("multiply.tf", SYMBOL),
        "multiply.tosf" => ("multiply.tosf", SYMBOL),
        "n" => ("x", LETTER_LOWERCASE),
        "n.sc" => ("h.sc", LETTER_SMALLCAPS),
        "nbspace" => ("nbspace", 1.0),
        "nine" => ("one", PUNCTUATION),
        "nine.dnom" => ("nine.dnom", NUMBER_SMALL),
        "nine.numr" => ("nine.numr", NUMBER_SMALL),
        "nine.osf" => ("zero.osf", PUNCTUATION),
        "nine.tf" => ("one", PUNCTUATION),
        "nine.tosf" => ("one", PUNCTUATION),
        "nineinferior" => ("nineinferior", NUMBER_SMALL),
        "ninesuperior" => ("ninesuperior", NUMBER_SMALL),
        "notequal" => ("notequal", SYMBOL),
        "notequal.osf" => ("notequal.osf", SYMBOL),
        "notequal.tf" => ("notequal.tf", SYMBOL),
        "notequal.tosf" => ("notequal.tosf", SYMBOL),
        "ntilde" => ("x", LETTER_LOWERCASE),
        "ntilde.sc" => ("h.sc", LETTER_SMALLCAPS),
        "numbersign" => ("numbersign", PUNCTUATION),
        "numbersign.osf" => ("numbersign.osf", PUNCTUATION),
        "numbersign.tf" => ("numbersign.tf", PUNCTUATION),
        "numbersign.tosf" => ("numbersign.tosf", PUNCTUATION),
        "numero" => ("numero", SYMBOL),
        "o" => ("x", LETTER_LOWERCASE),
        "o.sc" => ("h.sc", LETTER_SMALLCAPS),
        "oacute" => ("x", LETTER_LOWERCASE),
        "oacute.loclPLK" => ("x", LETTER_LOWERCASE),
        "oacute.sc" => ("h.sc", LETTER_SMALLCAPS),
        "oacute.sc.loclPLK" => ("h.sc", LETTER_SMALLCAPS),
        "ocircumflex" => ("x", LETTER_LOWERCASE),
        "ocircumflex.sc" => ("h.sc", LETTER_SMALLCAPS),
        "odieresis" => ("x", LETTER_LOWERCASE),
        "odieresis.sc" => ("h.sc", LETTER_SMALLCAPS),
        "oe" => ("x", LETTER_LOWERCASE),
        "oe.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ograve" => ("x", LETTER_LOWERCASE),
        "ograve.sc" => ("h.sc", LETTER_SMALLCAPS),
        "one" => ("one", PUNCTUATION),
        "one.dnom" => ("one.dnom", NUMBER_SMALL),
        "one.numr" => ("one.numr", NUMBER_SMALL),
        "one.osf" => ("zero.osf", PUNCTUATION),
        "one.tf" => ("one", PUNCTUATION),
        "one.tosf" => ("one", PUNCTUATION),
        "onehalf" => ("onehalf", NUMBER_FRACTION),
        "oneinferior" => ("oneinferior", NUMBER_SMALL),
        "onequarter" => ("onequarter", NUMBER_FRACTION),
        "onesuperior" => ("onesuperior", NUMBER_SMALL),
        "ordfeminine" => ("ordfeminine", 1.0),
        "ordmasculine" => ("ordmasculine", 1.0),
        "oslash" => ("x", LETTER_LOWERCASE),
        "oslash.sc" => ("h.sc", LETTER_SMALLCAPS),
        "otilde" => ("x", LETTER_LOWERCASE),
        "otilde.sc" => ("h.sc", LETTER_SMALLCAPS),
        "p" => ("x", LETTER_LOWERCASE),
        "p.sc" => ("h.sc", LETTER_SMALLCAPS),
        "paragraph" => ("paragraph", SYMBOL),
        "parenleft" => ("parenleft", PUNCTUATION),
        "parenleft.case" => ("parenleft.case", PUNCTUATION),
        "parenleft.dnom" => ("parenleft.dnom", PUNCTUATION),
        "parenleft.numr" => ("parenleft.numr", PUNCTUATION),
        "parenright" => ("parenright", PUNCTUATION),
        "parenright.case" => ("parenright.case", PUNCTUATION),
        "parenright.dnom" => ("parenright.dnom", PUNCTUATION),
        "parenright.numr" => ("parenright.numr", PUNCTUATION),
        "partialdiff" => ("partialdiff", SYMBOL),
        "partialdiff.osf" => ("partialdiff.osf", SYMBOL),
        "partialdiff.tf" => ("partialdiff.tf", SYMBOL),
        "partialdiff.tosf" => ("partialdiff.tosf", SYMBOL),
        "pe-cy.sc" => ("h.sc", LETTER_SMALLCAPS),
        "percent" => ("percent", SYMBOL),
        "percent.osf" => ("percent.osf", SYMBOL),
        "percent.tf" => ("percent.tf", SYMBOL),
        "percent.tosf" => ("percent.tosf", SYMBOL),
        "period" => ("period", PUNCTUATION),
        "periodcentered" => ("periodcentered", PUNCTUATION),
        "perthousand" => ("perthousand", SYMBOL),
        "perthousand.osf" => ("perthousand.osf", SYMBOL),
        "perthousand.tf" => ("perthousand.tf", SYMBOL),
        "perthousand.tosf" => ("perthousand.tosf", SYMBOL),
        "pi" => ("x", LETTER_LOWERCASE),
        "pi.sc" => ("h.sc", LETTER_SMALLCAPS),
        "plus" => ("plus", SYMBOL),
        "plus.dnom" => ("plus.dnom", SYMBOL),
        "plus.numr" => ("plus.numr", SYMBOL),
        "plus.osf" => ("plus.osf", SYMBOL),
        "plus.tf" => ("plus.tf", SYMBOL),
        "plus.tosf" => ("plus.tosf", SYMBOL),
        "plusminus" => ("plusminus", SYMBOL),
        "plusminus.osf" => ("plusminus.osf", SYMBOL),
        "plusminus.tf" => ("plusminus.tf", SYMBOL),
        "plusminus.tosf" => ("plusminus.tosf", SYMBOL),
        "product" => ("product", SYMBOL),
        "product.osf" => ("product.osf", SYMBOL),
        "product.tf" => ("product.tf", SYMBOL),
        "product.tosf" => ("product.tosf", SYMBOL),
        "punctuationspace" => ("punctuationspace", 1.0),
        "q" => ("x", LETTER_LOWERCASE),
        "q.sc" => ("h.sc", LETTER_SMALLCAPS),
        "question" => ("question", PUNCTUATION),
        "questiondown" => ("questiondown", PUNCTUATION),
        "questiondown.case" => ("questiondown.case", PUNCTUATION),
        "quotedbl" => ("quotedbl", PUNCTUATION),
        "quotedblbase" => ("quotedblbase", PUNCTUATION),
        "quotedblleft" => ("quotedblleft", PUNCTUATION),
        "quotedblright" => ("quotedblright", PUNCTUATION),
        "quoteleft" => ("quoteleft", PUNCTUATION),
        "quoteright" => ("quoteright", PUNCTUATION),
        "quotesinglbase" => ("quotesinglbase", PUNCTUATION),
        "quotesingle" => ("quotesingle", PUNCTUATION),
        "r" => ("x", LETTER_LOWERCASE),
        "r.sc" => ("h.sc", LETTER_SMALLCAPS),
        "radical" => ("radical", SYMBOL),
        "radical.osf" => ("radical.osf", SYMBOL),
        "radical.tf" => ("radical.tf", SYMBOL),
        "radical.tosf" => ("radical.tosf", SYMBOL),
        "registered" => ("registered", SYMBOL),
        "ring" => ("ring", 1.0),
        "ring.case" => ("ring.case", 1.0),
        "ring.sc" => ("ring.sc", 1.0),
        "ringcomb" => ("ringcomb", 1.0),
        "ringcomb.case" => ("ringcomb.case", 1.0),
        "ringcomb.sc" => ("ringcomb.sc", 1.0),
        "s" => ("x", LETTER_LOWERCASE),
        "s.sc" => ("h.sc", LETTER_SMALLCAPS),
        "section" => ("section", SYMBOL),
        "section.osf" => ("section.osf", SYMBOL),
        "section.tf" => ("section.tf", SYMBOL),
        "section.tosf" => ("section.tosf", SYMBOL),
        "semicolon" => ("semicolon", PUNCTUATION),
        "seven" => ("one", PUNCTUATION),
        "seven.dnom" => ("seven.dnom", NUMBER_SMALL),
        "seven.numr" => ("seven.numr", NUMBER_SMALL),
        "seven.osf" => ("zero.osf", PUNCTUATION),
        "seven.tf" => ("one", PUNCTUATION),
        "seven.tosf" => ("one", PUNCTUATION),
        "seveninferior" => ("seveninferior", NUMBER_SMALL),
        "sevensuperior" => ("sevensuperior", NUMBER_SMALL),
        "six" => ("one", PUNCTUATION),
        "six.dnom" => ("six.dnom", NUMBER_SMALL),
        "six.numr" => ("six.numr", NUMBER_SMALL),
        "six.osf" => ("zero.osf", PUNCTUATION),
        "six.tf" => ("one", PUNCTUATION),
        "six.tosf" => ("one", PUNCTUATION),
        "sixinferior" => ("sixinferior", NUMBER_SMALL),
        "sixsuperior" => ("sixsuperior", NUMBER_SMALL),
        "slash" => ("slash", 1.0),
        "softhyphen" => ("softhyphen", 1.0),
        "softhyphen.case" => ("softhyphen.case", 1.0),
        "space" => ("space", 1.0),
        "space.frac" => ("space.frac", 1.0),
        "sterling" => ("sterling", SYMBOL_CURRENCY),
        "sterling.osf" => ("sterling.osf", SYMBOL_CURRENCY),
        "sterling.tf" => ("sterling.tf", SYMBOL_CURRENCY),
        "sterling.tosf" => ("sterling.tosf", SYMBOL_CURRENCY),
        "summation" => ("summation", SYMBOL),
        "summation.osf" => ("summation.osf", SYMBOL),
        "summation.tf" => ("summation.tf", SYMBOL),
        "summation.tosf" => ("summation.tosf", SYMBOL),
        "t" => ("x", LETTER_LOWERCASE),
        "t.sc" => ("h.sc", LETTER_SMALLCAPS),
        "thorn" => ("x", LETTER_LOWERCASE),
        "thorn.sc" => ("h.sc", LETTER_SMALLCAPS),
        "three" => ("one", PUNCTUATION),
        "three.dnom" => ("three.dnom", NUMBER_SMALL),
        "three.numr" => ("three.numr", NUMBER_SMALL),
        "three.osf" => ("zero.osf", PUNCTUATION),
        "three.tf" => ("one", PUNCTUATION),
        "three.tosf" => ("one", PUNCTUATION),
        "threeinferior" => ("threeinferior", NUMBER_SMALL),
        "threequarters" => ("threequarters", NUMBER_FRACTION),
        "threesuperior" => ("threesuperior", NUMBER_SMALL),
        "tilde" => ("tilde", 1.0),
        "tilde.case" => ("tilde.case", 1.0),
        "tilde.sc" => ("tilde.sc", 1.0),
        "tildecomb" => ("tildecomb", 1.0),
        "tildecomb.case" => ("tildecomb.case", 1.0),
        "tildecomb.sc" => ("tildecomb.sc", 1.0),
        "trademark" => ("trademark", SYMBOL),
        "two" => ("one", PUNCTUATION),
        "two.dnom" => ("two.dnom", NUMBER_SMALL),
        "two.numr" => ("two.numr", NUMBER_SMALL),
        "two.osf" => ("zero.osf", PUNCTUATION),
        "two.tf" => ("one", PUNCTUATION),
        "two.tosf" => ("one", PUNCTUATION),
        "twoinferior" => ("twoinferior", NUMBER_SMALL),
        "twosuperior" => ("twosuperior", NUMBER_SMALL),
        "u" => ("x", LETTER_LOWERCASE),
        "u.sc" => ("h.sc", LETTER_SMALLCAPS),
        "uacute" => ("x", LETTER_LOWERCASE),
        "uacute.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ucircumflex" => ("x", LETTER_LOWERCASE),
        "ucircumflex.sc" => ("h.sc", LETTER_SMALLCAPS),
        "udieresis" => ("x", LETTER_LOWERCASE),
        "udieresis.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ugrave" => ("x", LETTER_LOWERCASE),
        "ugrave.sc" => ("h.sc", LETTER_SMALLCAPS),
        "underscore" => ("underscore", 1.0),
        "v" => ("x", LETTER_LOWERCASE),
        "v.sc" => ("h.sc", LETTER_SMALLCAPS),
        "w" => ("x", LETTER_LOWERCASE),
        "w.sc" => ("h.sc", LETTER_SMALLCAPS),
        "x" => ("x", LETTER_LOWERCASE),
        "x.sc" => ("h.sc", LETTER_SMALLCAPS),
        "y" => ("x", LETTER_LOWERCASE),
        "y.sc" => ("h.sc", LETTER_SMALLCAPS),
        "yacute" => ("x", LETTER_LOWERCASE),
        "yacute.sc" => ("h.sc", LETTER_SMALLCAPS),
        "ydieresis" => ("x", LETTER_LOWERCASE),
        "ydieresis.sc" => ("h.sc", LETTER_SMALLCAPS),
        "yen" => ("yen", SYMBOL_CURRENCY),
        "yen.osf" => ("yen.osf", SYMBOL_CURRENCY),
        "yen.tf" => ("yen.tf", SYMBOL_CURRENCY),
        "yen.tosf" => ("yen.tosf", SYMBOL_CURRENCY),
        "z" => ("x", LETTER_LOWERCASE),
        "z.sc" => ("h.sc", LETTER_SMALLCAPS),
        "zero" => ("one", PUNCTUATION),
        "zero.dnom" => ("zero.dnom", NUMBER_SMALL),
        "zero.numr" => ("zero.numr", NUMBER_SMALL),
        "zero.osf" => ("zero.osf", PUNCTUATION),
        "zero.osf.zero" => ("zero.osf", PUNCTUATION),
        "zero.tf" => ("one", PUNCTUATION),
        "zero.tf.zero" => ("one", PUNCTUATION),
        "zero.tosf" => ("one", PUNCTUATION),
        "zero.tosf.zero" => ("one", PUNCTUATION),
        "zero.zero" => ("one", PUNCTUATION),
        "zeroinferior" => ("zeroinferior", NUMBER_SMALL),
        "zerosuperior" => ("zerosuperior", NUMBER_SMALL),
        "zerowidthspace" => ("zerowidthspace", 1.0),
        _ => panic!("Don't know what to do for {}", name),
    }
}
